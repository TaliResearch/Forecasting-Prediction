What is a Kalman Filter?
The Kalman filter is an algorithm that uses noisy observations of a system over time to estimate 
the parameters of the system (some of which are unobservable) and predict future observations. 
At each time step, it makes a prediction, takes in a measurement, and updates itself based 
on how the prediction and measurement compare.

The algorithm is as follows:
1.	Take as input a mathematical model of the system, i.e.
•	the transition matrix, which tells us how the system evolves from one state to another. 
For instance, if we are modeling the movement of a car, then the next values of position
and velocity can be computed from the previous ones using kinematic equations. 
Alternatively, if we have a system which is fairly stable, we might model its 
evolution as a random walk. If you want to read up on Kalman filters, note that 
this matrix is usually called A. 

•	the observation matrix, which tells us the next measurement we should expect 
given the predicted next state. If we are measuring the position of the car,
we just extract the position values stored in the state. For a more complex example, 
consider estimating a linear regression model for the data. Then our state is the 
coefficients of the model, and we can predict the next measurement 
from the linear equation. This is denoted H




2.	Take as input an initial estimate of the state of the system and the error of the estimate, mu_0 and sigma_0.
3.	At each timestep:
•	estimate the current state of the system x_t using the transition matrix
•	take as input new measurements z_t
•	use the conditional probability of the measurements given the state, taking into account the 
uncertainties of the measurement and the state estimate, to update the estimated current
state of the system x_t and the covariance matrix of the estimate P_t.

See:https://upload.wikimedia.org/wikipedia/commons/a/a5/Basic_concept_of_Kalman_filtering.svg
to visualise the procedure followed by the algorithm.

It's very important for the algorithm to keep track of the covariances of its estimates. 
This way, it can give us a more nuanced result than simply a point value when we ask for it, 
and it can use its confidence to decide how much to be influenced by new measurements during
the update process. The more certain it is of its estimate of the state, the more skeptical 
it will be of measurements that disagree with the state.
By default, the errors are assumed to be normally distributed, and this assumption allows
the algorithm to calculate precise confidence intervals. 
It can, however, be implemented for non-normal errors.
